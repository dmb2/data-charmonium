#!/usr/bin/env python
import sys
import ast
from optparse import OptionParser, OptionGroup
from sys import stdout, stderr, exit
from subprocess import Popen,call,PIPE

parser = OptionParser(usage='Usage: %prog [options] [input file list]')
parser.add_option('-b','--branch-name',dest='branch_name',
                  help='Branch name to be split',metavar='BRANCH')
parser.add_option('-w','--bin-width',dest='bin_width',
                  help='Width of each bin',metavar='WIDTH')
parser.add_option('-i','--init-val',dest='init_val',
                  help='Initial value of branch_name to start at',metavar='I')
parser.add_option('-n','--n-bins',dest='n_bins',
                  help='Number of bins to split into',metavar='N')
parser.add_option('-a','--array',dest='array',
                  help='High bin boundaries',metavar='[1,2,3,..]')
(options,args)=parser.parse_args()
def main():
    if len(args)==0:
        parser.print_help()
        exit(1)
    branch_name=options.branch_name
    sh_args=''
    bins=None
    bin_width=None
    init_val=None
    bin_arr=[]
    if options.n_bins:
        bins=int(options.n_bins)
    if options.bin_width:
        bin_width=float(options.bin_width)
    if options.init_val:
        init_val=float(options.init_val)
    if options.array!=None:
        arr=ast.literal_eval(options.array)
        for i in range(len(arr)):
            bin_arr+=[(arr[i-1],arr[i])]
        pair=bin_arr[0]
        bin_arr[0]=(init_val,pair[1])
        print bin_arr
    else:
        for i in range(0,bins):
            bin_arr+=[(bin_width*i+init_val, bin_width*(i+1)+init_val)]
    for val in bin_arr:
        lo,hi=val
        key=("%s_%d_%d:"%(branch_name,int(lo*100),int(hi*100))).replace("-","n")
        sh_args+=key+"\"(%s > %.3g) && (%s < %.3g)\" "%(branch_name,lo,
                                                    branch_name,hi)
    for fname in args:
        if fname.split('.')[-1]!='root':
            print "ERROR: This script should only be run on root files"
            exit(1)
        sh_str="split-tree -i %s -t mini "%(fname) + sh_args
        process=Popen(sh_str,shell=True,stdout=stdout,stderr=stderr)
        process.wait()
if __name__ == "__main__":
   sys.exit(main()) 
